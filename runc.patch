diff --git a/libcontainer/process_linux.go b/libcontainer/process_linux.go
index e8ffac9f..ca130e5e 100644
--- a/libcontainer/process_linux.go
+++ b/libcontainer/process_linux.go
@@ -20,6 +20,8 @@ import (
 	"github.com/opencontainers/runc/libcontainer/utils"
 
 	"golang.org/x/sys/unix"
+	"local/logger"
+	"time"
 )
 
 // Synchronisation value for cgroup namespace setup.
@@ -345,6 +347,9 @@ func (p *initProcess) start() error {
 	)
 
 	ierr := parseSync(p.parentPipe, func(sync *syncT) error {
+		logfd,_ := logger.OpenLog("/tmp/test", "log")
+		defer logfd.Close()
+		var log_msg string
 		switch sync.Type {
 		case procReady:
 			// set rlimits, this has to be done here because we lose permissions
@@ -373,9 +378,14 @@ func (p *initProcess) start() error {
 					s.Pid = p.cmd.Process.Pid
 					s.Status = "creating"
 					for i, hook := range p.config.Config.Hooks.Prestart {
+						logger.Log(logfd, log_msg)
+						var startTime = time.Now()
 						if err := hook.Run(s); err != nil {
 							return newSystemErrorWithCausef(err, "running prestart hook %d", i)
 						}
+						var duration = time.Since(startTime);
+						log_msg = fmt.Sprintf("Prestart: %d Time:%v\n", i, duration);
+						logger.Log(logfd, log_msg)
 					}
 				}
 			}
@@ -403,9 +413,14 @@ func (p *initProcess) start() error {
 				s.Pid = p.cmd.Process.Pid
 				s.Status = "creating"
 				for i, hook := range p.config.Config.Hooks.Prestart {
+					logger.Log(logfd, log_msg)
+					var startTime = time.Now()
 					if err := hook.Run(s); err != nil {
 						return newSystemErrorWithCausef(err, "running prestart hook %d", i)
 					}
+					var duration = time.Since(startTime);
+					log_msg = fmt.Sprintf("Prestart: %d Time:%v\n", i, duration);
+					logger.Log(logfd, log_msg)
 				}
 			}
 			// Sync with child.
diff --git a/libcontainer/rootfs_linux.go b/libcontainer/rootfs_linux.go
index e7c2f8ad..eadba9db 100644
--- a/libcontainer/rootfs_linux.go
+++ b/libcontainer/rootfs_linux.go
@@ -23,6 +23,7 @@ import (
 	"github.com/opencontainers/selinux/go-selinux/label"
 
 	"golang.org/x/sys/unix"
+	"local/logger"
 )
 
 const defaultMountFlags = unix.MS_NOEXEC | unix.MS_NOSUID | unix.MS_NODEV
@@ -41,6 +42,10 @@ func needsSetupDev(config *configs.Config) bool {
 // inside a new mount namespace. It doesn't set anything as ro. You must call
 // finalizeRootfs after this function to finish setting up the rootfs.
 func prepareRootfs(pipe io.ReadWriter, iConfig *initConfig) (err error) {
+	logfd,_ := logger.OpenLog("/tmp/test", "log")
+	defer logfd.Close()
+	var log_msg string
+
 	config := iConfig.Config
 	if err := prepareRoot(config); err != nil {
 		return newSystemErrorWithCause(err, "preparing rootfs")
@@ -49,6 +54,9 @@ func prepareRootfs(pipe io.ReadWriter, iConfig *initConfig) (err error) {
 	hasCgroupns := config.Namespaces.Contains(configs.NEWCGROUP)
 	setupDev := needsSetupDev(config)
 	for _, m := range config.Mounts {
+		log_msg = fmt.Sprintf("Source %s", m.Source)
+		logger.Log(logfd, log_msg)
+		var startTime = time.Now()
 		for _, precmd := range m.PremountCmds {
 			if err := mountCmd(precmd); err != nil {
 				return newSystemErrorWithCause(err, "running premount command")
@@ -63,6 +71,9 @@ func prepareRootfs(pipe io.ReadWriter, iConfig *initConfig) (err error) {
 				return newSystemErrorWithCause(err, "running postmount command")
 			}
 		}
+		var duration = time.Since(startTime);
+		log_msg = fmt.Sprintf("%v\n", duration);
+		logger.Log(logfd, log_msg)
 	}
 
 	if setupDev {
